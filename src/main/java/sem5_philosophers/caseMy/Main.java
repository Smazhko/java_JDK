package sem5_philosophers.caseMy;

/*
Пять безмолвных философов сидят вокруг круглого стола, перед каждым философом стоит тарелка спагетти.
Вилки лежат на столе между каждой парой ближайших философов.
Каждый философ может либо есть, либо размышлять.
Философ может есть только тогда, когда держит две вилки — взятую справа и слева.
Философ не может есть два раза подряд, не прервавшись на размышления (можно не учитывать).
Можно брать только две вилки одновременно.
Описать в виде кода такую ситуацию. Каждый философ должен поесть три раза.
 */

/*
Для решения задачи создаём 5 философов, которые наследуются от THREAD, и 5 палочек,
в которых есть методы - занять и освободить палочку.
Класс стол рассаживает философов, определяя, какие палочки лежат рядом с ними.
Добавляем класс LOGGER, который будет выводить сообщения ото всех участников процесса (статический синхр метод).

Каждый фолософ знает про стол, за который его сажают, ибо стол будет проверять - свободна ли пара нужных палочек.
Счётчик количества поеданий обеда - через for.
Попытка поесть - бесконечный цикл, который каждый раз обращается к столу для проверки свободности нужной пары палочек.
Проверка доступности палочек - синхронизированный метод. Синхронизация нужна для того,
чтобы во время использования проверки одним философом, другие не могли использовать эту проверку.
При успешной проверке (обе палочки свободны) стол занимает эти палочки через методы самих палочек.
Во время занимания мы всё ещё находимся в синхронизированном методе,
поэтому по идее другой философ поменять состояние палочек в этот момент не может.
Далее - философ ест, наедается и освобождает палочки.

У каждого философа свой цвет в консоли - это весело :)

В итоге получается, что в программе не только философы конкурируют за палочки,
но и все вместе взятые конкурируют за поток вывода - LOGGER.
С синхронизацией метода печати в консоль логи стали более реалистичными в смысле порядка и очередности действий.

Другой вариант решения задачи - через ReentrantLock. надо разобраться!
 */


public class Main {
    public static void main(String[] args) {
        Table table = new Table();
        Logger logger = new Logger();

        logger.start();
        table.start();
    }
}


/*
Сервируем стол...
Рассаживаем гостей...
Философ 1 уселся за стол. Рядом с ним лежат палочки 1 и 2
Философ 2 уселся за стол. Рядом с ним лежат палочки 2 и 3
Философ 3 уселся за стол. Рядом с ним лежат палочки 3 и 4
Философ 4 уселся за стол. Рядом с ним лежат палочки 4 и 5
Философ 5 уселся за стол. Рядом с ним лежат палочки 5 и 1
    палочка 1 занята
    палочка 2 занята
    палочка 4 занята
    палочка 5 занята
Философ 1 проголодался и 1-й раз взялся за свой рамен, заняв палочки 1 и 2.
Философ 4 проголодался и 1-й раз взялся за свой рамен, заняв палочки 4 и 5.
   Философ 4 поел, отложил палочки 4 и 5 и начал размышлять...
    палочка 3 занята
        палочка 4 освободилась
    палочка 4 занята
Философ 3 проголодался и 1-й раз взялся за свой рамен, заняв палочки 3 и 4.
        палочка 5 освободилась
   Философ 3 поел, отложил палочки 3 и 4 и начал размышлять...
        палочка 3 освободилась
        палочка 4 освободилась
   Философ 1 поел, отложил палочки 1 и 2 и начал размышлять...
        палочка 1 освободилась
    палочка 5 занята
    палочка 1 занята
        палочка 2 освободилась
Философ 5 проголодался и 1-й раз взялся за свой рамен, заняв палочки 5 и 1.
    палочка 2 занята
    палочка 3 занята
Философ 2 проголодался и 1-й раз взялся за свой рамен, заняв палочки 2 и 3.
   Философ 2 поел, отложил палочки 2 и 3 и начал размышлять...
        палочка 2 освободилась
        палочка 3 освободилась
    палочка 3 занята
    палочка 4 занята
Философ 3 проголодался и 2-й раз взялся за свой рамен, заняв палочки 3 и 4.
   Философ 5 поел, отложил палочки 5 и 1 и начал размышлять...
        палочка 5 освободилась
        палочка 1 освободилась
    палочка 1 занята
    палочка 2 занята
Философ 1 проголодался и 2-й раз взялся за свой рамен, заняв палочки 1 и 2.
   Философ 1 поел, отложил палочки 1 и 2 и начал размышлять...
        палочка 1 освободилась
        палочка 2 освободилась
    палочка 1 занята
    палочка 2 занята
Философ 1 проголодался и 3-й раз взялся за свой рамен, заняв палочки 1 и 2.
   Философ 3 поел, отложил палочки 3 и 4 и начал размышлять...
        палочка 3 освободилась
        палочка 4 освободилась
    палочка 4 занята
    палочка 5 занята
Философ 4 проголодался и 2-й раз взялся за свой рамен, заняв палочки 4 и 5.
     Философ 1 наелся досыта, палочки 1 и 2 свободны. Ничего не сказав, он ушёл в закат.
        палочка 1 освободилась
        палочка 2 освободилась
    палочка 2 занята
    палочка 3 занята
Философ 2 проголодался и 2-й раз взялся за свой рамен, заняв палочки 2 и 3.
   Философ 2 поел, отложил палочки 2 и 3 и начал размышлять...
        палочка 2 освободилась
        палочка 3 освободилась
    палочка 2 занята
    палочка 3 занята
Философ 2 проголодался и 3-й раз взялся за свой рамен, заняв палочки 2 и 3.
   Философ 4 поел, отложил палочки 4 и 5 и начал размышлять...
        палочка 4 освободилась
        палочка 5 освободилась
    палочка 5 занята
    палочка 1 занята
Философ 5 проголодался и 2-й раз взялся за свой рамен, заняв палочки 5 и 1.
   Философ 5 поел, отложил палочки 5 и 1 и начал размышлять...
    палочка 4 занята
        палочка 5 освободилась
    палочка 5 занята
Философ 4 проголодался и 3-й раз взялся за свой рамен, заняв палочки 4 и 5.
        палочка 1 освободилась
     Философ 2 наелся досыта, палочки 2 и 3 свободны. Ничего не сказав, он ушёл в закат.
        палочка 2 освободилась
        палочка 3 освободилась
     Философ 4 наелся досыта, палочки 4 и 5 свободны. Ничего не сказав, он ушёл в закат.
        палочка 4 освободилась
        палочка 5 освободилась
    палочка 3 занята
    палочка 4 занята
    палочка 5 занята
    палочка 1 занята
Философ 3 проголодался и 3-й раз взялся за свой рамен, заняв палочки 3 и 4.
Философ 5 проголодался и 3-й раз взялся за свой рамен, заняв палочки 5 и 1.
     Философ 3 наелся досыта, палочки 3 и 4 свободны. Ничего не сказав, он ушёл в закат.
        палочка 3 освободилась
        палочка 4 освободилась
     Философ 5 наелся досыта, палочки 5 и 1 свободны. Ничего не сказав, он ушёл в закат.
        палочка 5 освободилась
        палочка 1 освободилась
 */